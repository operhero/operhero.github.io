I"E<p>提供重试、断路、超时、故障恢复等策略方法库</p>

<h2 id="重试策略retry">重试策略（Retry）</h2>
<p>重试策略针对的前置条件是短暂的故障延迟且在短暂的延迟之后能够自我纠正</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="nf">Compute</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="m">1</span> <span class="p">/</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">retryTwoTimesPolicy</span> <span class="p">=</span>
        <span class="n">Policy</span>
            <span class="p">.</span><span class="n">Handle</span><span class="p">&lt;</span><span class="n">DivideByZeroException</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="nf">Retry</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"执行失败! 重试次数 {0}"</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"异常来自 {0}"</span><span class="p">,</span> <span class="n">ex</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="n">Name</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="n">retryTwoTimesPolicy</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(()</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="nf">Compute</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>控制台输出：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>执行失败! 重试次数 1
异常来自 DivideByZeroException
执行失败! 重试次数 2
异常来自 DivideByZeroException
执行失败! 重试次数 3
异常来自 DivideByZeroException
Unhandled exception. System.DivideByZeroException: Attempted to divide by zero.
   at Test2.Program.Compute() in D:\Test2\Test2\Program.cs:line 144
   at Test2.Program.&lt;&gt;c.&lt;Main&gt;b__2_1() in D:\Test2\Test2\Program.cs:line 159
   at Polly.Policy.&lt;&gt;c__DisplayClass108_0.&lt;Execute&gt;b__0(Context ctx, CancellationToken ct)
   at Polly.Policy.&lt;&gt;c__DisplayClass138_0.&lt;Implementation&gt;b__0(Context ctx, CancellationToken token)
   at Polly.Retry.RetryEngine.Implementation[TResult](Func`3 action, Context context, CancellationToken cancellationToken, ExceptionPredicates shouldRetryExceptionPredicates, ResultPredicates`1 shouldRetryResultPredicates, Action`4 onRetry, Int32 permittedRetryCount, IEnumerable`1 sleepDurationsEnumerable, Func`4 sleepDurationProvider)
   at Polly.Retry.RetryPolicy.Implementation[TResult](Func`3 action, Context context, CancellationToken cancellationToken)
   at Polly.Policy.Implementation(Action`2 action, Context context, CancellationToken cancellationToken)
   at Polly.Policy.Execute(Action`2 action, Context context, CancellationToken cancellationToken)
   at Polly.Policy.Execute(Action action)
   at Test2.Program.Main(String[] args) in D:\Test2\Test2\Program.cs:line 157
</code></pre></div></div>
<p>重试三次之后，最终会抛出异常</p>

<p>当然，可指定每次重试之间等待的时间间隔</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="nf">Compute</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="m">1</span> <span class="p">/</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="nf">ReportaError</span><span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">,</span> <span class="n">TimeSpan</span> <span class="n">tiempo</span><span class="p">,</span> <span class="kt">int</span> <span class="n">intento</span><span class="p">,</span> <span class="n">Context</span> <span class="n">contexto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"异常: </span><span class="p">{</span><span class="n">intento</span><span class="p">:</span><span class="m">00</span><span class="p">}</span><span class="s"> (调用秒数: </span><span class="p">{</span><span class="n">tiempo</span><span class="p">.</span><span class="n">Seconds</span><span class="p">}</span><span class="s"> 秒)\t执行时间: </span><span class="p">{</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">politicaWaitAndRetry</span> <span class="p">=</span> <span class="n">Policy</span>
        <span class="p">.</span><span class="n">Handle</span><span class="p">&lt;</span><span class="n">DivideByZeroException</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="nf">WaitAndRetry</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span>
        <span class="p">{</span>
            <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">),</span>
            <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">3</span><span class="p">),</span>
            <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
            <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">7</span><span class="p">)</span>
        <span class="p">},</span> <span class="n">ReportaError</span><span class="p">);</span>
    <span class="n">politicaWaitAndRetry</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nf">Compute</span><span class="p">();</span> <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="回退策略fallback">回退策略（Fallback）</h2>
<p>回退策略意在定义失败时返回的结果</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="nf">Compute</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="m">1</span> <span class="p">/</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">fallBackPolicy</span> <span class="p">=</span>
        <span class="n">Policy</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
            <span class="p">.</span><span class="n">Handle</span><span class="p">&lt;</span><span class="n">DivideByZeroException</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="n">Fallback</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(-</span><span class="m">1</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">res</span> <span class="p">=</span> <span class="n">fallBackPolicy</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="n">Compute</span><span class="p">);</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"result is </span><span class="p">{</span><span class="n">res</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>控制台输出</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>result is -1
</code></pre></div></div>

<h2 id="包装策略policywrap">包装策略（PolicyWrap）</h2>
<p>包装策略针对的前置条件是不同的故障需要不同的策略</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">string</span> <span class="nf">ThrowException</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">fallBackPolicy</span> <span class="p">=</span>
        <span class="n">Policy</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span>
            <span class="p">.</span><span class="n">Handle</span><span class="p">&lt;</span><span class="n">Exception</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="nf">Fallback</span><span class="p">(</span><span class="s">"执行失败，返回Fallback"</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">fallBack</span> <span class="p">=</span> <span class="n">fallBackPolicy</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nf">ThrowException</span><span class="p">();</span> <span class="p">});</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">fallBack</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">politicaWaitAndRetry</span> <span class="p">=</span>
        <span class="n">Policy</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span>
            <span class="p">.</span><span class="n">Handle</span><span class="p">&lt;</span><span class="n">Exception</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="nf">Retry</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"执行失败! 重试次数 {0}"</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"异常来自 {0}"</span><span class="p">,</span> <span class="n">ex</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="n">Name</span><span class="p">);</span>
            <span class="p">});</span>

    <span class="kt">var</span> <span class="n">mixedPolicy</span> <span class="p">=</span> <span class="n">Policy</span><span class="p">.</span><span class="nf">Wrap</span><span class="p">(</span><span class="n">fallBackPolicy</span><span class="p">,</span> <span class="n">politicaWaitAndRetry</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">mixedResult</span> <span class="p">=</span> <span class="n">mixedPolicy</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="n">ThrowException</span><span class="p">);</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"执行结果: </span><span class="p">{</span><span class="n">mixedResult</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="异常">异常</h2>
<h3 id="--捕获多个异常">- 捕获多个异常</h3>
<p>当有多个异常类型时，通过OR声明</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Policy</span>
  <span class="p">.</span><span class="n">Handle</span><span class="p">&lt;</span><span class="n">DivideByZeroException</span><span class="p">&gt;()</span>
  <span class="p">.</span><span class="n">Or</span><span class="p">&lt;</span><span class="n">ArgumentException</span><span class="p">&gt;()</span>
</code></pre></div></div>
<h3 id="--策略条件">- 策略条件</h3>
<p>除了异常，Polly还支持对结果进行性条件定义</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="nf">Compute</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">policy</span> <span class="p">=</span>
        <span class="n">Policy</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
            <span class="p">.</span><span class="nf">HandleResult</span><span class="p">(</span><span class="n">r</span><span class="p">=&gt;</span><span class="n">r</span><span class="p">==</span><span class="m">0</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">OrResult</span><span class="p">(</span><span class="n">r</span><span class="p">=&gt;</span><span class="n">r</span><span class="p">==</span><span class="m">1</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Retry</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"重试: </span><span class="p">{</span><span class="n">count</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="kt">var</span> <span class="n">r</span> <span class="p">=</span> <span class="n">policy</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="n">Compute</span><span class="p">);</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"result: </span><span class="p">{</span><span class="n">r</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>控制台输出</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>重试: 1
result: 0
</code></pre></div></div>
<p>当结果为0或者1时，尝试重试</p>
:ET